import os
from dotenv import load_dotenv, find_dotenv
load_dotenv(find_dotenv())
API_TOKEN = os.getenv("API_TOKEN")
GROUP_CHAT_ID = os.getenv("GROUP_CHAT_ID")
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.router import Router
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.command import Command
from aiogram.filters import StateFilter
import asyncio
import re

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")],
        [KeyboardButton(text="–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞–Ω–æ–Ω—ñ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")]
    ],
    resize_keyboard=True
)

tags_markup = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–í–∞–∂–ª–∏–≤–æ", callback_data="tag_–≤–∞–∂–ª–∏–≤–æ")],
        [InlineKeyboardButton(text="–°–∫–∞—Ä–≥–∞", callback_data="tag_—Å–∫–∞—Ä–≥–∞")],
        [InlineKeyboardButton(text="–ü–æ–±–∞–∂–∞–Ω–Ω—è", callback_data="tag_–ø–æ–±–∞–∂–∞–Ω–Ω—è")]
    ]
)

confirmation_markup = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–¢–∞–∫", callback_data="confirm_send"),
         InlineKeyboardButton(text="–ù—ñ", callback_data="cancel_send")]
    ]
)

anonymous_confirmation_markup = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–¢–∞–∫", callback_data="confirm_anonymous_send"),
         InlineKeyboardButton(text="–ù—ñ", callback_data="cancel_anonymous_send")]
    ]
)

class MessageState(StatesGroup):
    name = State()
    contact = State()
    group = State()
    media = State()
    message = State()
    tag = State()
    confirmation = State()

class AnonymousMessageState(StatesGroup):
    media = State()
    message = State()
    tag = State()
    contact = State()
    confirmation = State()

def escape_markdown_v2(text: str) -> str:
    escape_chars = r"*_[]()~>#+-=|{}.!"
    return re.sub(f"[{re.escape(escape_chars)}]", r"\\\g<0>", text)

async def format_regular_message(data: dict) -> str:
    return (
        f"–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n\n"
        f"üë§ *–Ü–º'—è:* {escape_markdown_v2(data.get('name'))}\n"
        f"üìû *–ö–æ–Ω—Ç–∞–∫—Ç:* {escape_markdown_v2(data.get('contact'))}\n"
        f"üìö *–ì—Ä—É–ø–∞:* {escape_markdown_v2(data.get('group'))}\n"
        f"üì© *–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:* {escape_markdown_v2(data.get('final_message', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'))}\n"
        f"üè∑ *–¢–µ–≥:* {escape_markdown_v2(data.get('tag'))}"
    )

async def format_anonymous_message(data: dict) -> str:
    return (
        f"–ê–Ω–æ–Ω—ñ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n\n"
        f"üì© *–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:* {escape_markdown_v2(data.get('final_message', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'))}\n"
        f"üìû *–ö–æ–Ω—Ç–∞–∫—Ç:* {escape_markdown_v2(data.get('contact', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'))}\n"
        f"üè∑ *–¢–µ–≥:* {escape_markdown_v2(data.get('tag'))}"
    )

@router.message(Command(commands=["start"]))
async def start(message: types.Message):
    await message.answer(
        "–í—ñ—Ç–∞—é, —à–∞–Ω–æ–≤–Ω–∏–π —Å—Ç—É–¥–µ–Ω—Ç–µ\\! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, –ø–æ–±–∞–∂–∞–Ω—å —Ç–∞ —Å–∫–∞—Ä–≥ –¥–æ —Å—Ç—É–¥–µ–Ω—Ç—Å—å–∫–æ—ó —Ä–∞–¥–∏\\. –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∏–∂—á–µ:",
        reply_markup=main_menu,
        parse_mode="MarkdownV2"
    )

@router.message(lambda message: message.text == "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
async def send_message(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ *—ñ–º'—è* —Ç–∞ *–ø—Ä—ñ–∑–≤–∏—â–µ* \\(–ü—Ä–∏–∫–ª–∞–¥: *–¢–∞—Ä–∞—Å –Ü–≤–∞–Ω–µ–Ω–∫–æ*\\):",
        reply_markup=types.ReplyKeyboardRemove(),
        parse_mode="MarkdownV2"
    )
    await state.set_state(MessageState.name)

@router.message(lambda message: message.text == "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞–Ω–æ–Ω—ñ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
async def send_anonymous_message(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ *–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è* –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å *–º–µ–¥—ñ–∞—Ñ–∞–π–ª* \\(—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç\\):",
        reply_markup=types.ReplyKeyboardRemove(),
        parse_mode="MarkdownV2"
    )
    await state.set_state(AnonymousMessageState.media)

@router.message(StateFilter(MessageState.name))
async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(
        "–Ø–∫ –∑ –≤–∞–º–∏ *–∑–≤'—è–∑–∞—Ç–∏—Å—è*? –ó–∞–ª–∏—à—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç\\(–¢–µ–ª–µ–≥—Ä–∞–º/–î—ñ—Å–∫–æ—Ä–¥\\):",
        parse_mode="MarkdownV2"
    )
    await state.set_state(MessageState.contact)

@router.message(StateFilter(MessageState.contact))
async def get_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    await message.answer(
        "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É *–≥—Ä—É–ø—É* \\(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ï\\-14\\):",
        parse_mode="MarkdownV2"
    )
    await state.set_state(MessageState.group)

@router.message(StateFilter(MessageState.group))
async def get_group(message: types.Message, state: FSMContext):
    await state.update_data(group=message.text)
    await message.answer(
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å *–º–µ–¥—ñ–∞—Ñ–∞–π–ª* \\(—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç\\) –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å *—Ç–µ–∫—Å—Ç* –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:",
        parse_mode="MarkdownV2"
    )
    await state.set_state(MessageState.media)

async def handle_media_message(message: types.Message, state: FSMContext, is_anonymous: bool):
    data = {}
    if message.content_type == types.ContentType.TEXT:
        data = {"final_message": message.text}
        await state.update_data(**data)
        if is_anonymous:
            await message.answer(
                "–Ø–∫ –∑ –≤–∞–º–∏ *–∑–≤'—è–∑–∞—Ç–∏—Å—è*? –ó–∞–ª–∏—à—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç\\(–¢–µ–ª–µ–≥—Ä–∞–º/–î—ñ—Å–∫–æ—Ä–¥\\):",
                parse_mode="MarkdownV2"
            )
            await state.set_state(AnonymousMessageState.contact)
        else:
            await message.answer(
                "–û–±–µ—Ä—ñ—Ç—å *—Ç–µ–≥* –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:",
                reply_markup=tags_markup,
                parse_mode="MarkdownV2"
            )
            await state.set_state(MessageState.tag)
        return

    if message.content_type == types.ContentType.PHOTO:
        file_id = message.photo[-1].file_id
        data = {"final_message": "–§–æ—Ç–æ", "file_type": "photo", "file_id": file_id}
    elif message.content_type == types.ContentType.DOCUMENT:
        file_id = message.document.file_id
        data = {"final_message": "–î–æ–∫—É–º–µ–Ω—Ç", "file_type": "document", "file_id": file_id}
    else:
        await message.answer(
            "–ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è –ª–∏—à–µ *—Ç–µ–∫—Å—Ç*, *—Ñ–æ—Ç–æ* –∞–±–æ *–¥–æ–∫—É–º–µ–Ω—Ç–∏*\\. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É\\.",
            parse_mode="MarkdownV2"
        )
        return

    await state.update_data(**data)
    await message.answer(
        "–ù–∞–ø–∏—à—ñ—Ç—å *–æ–ø–∏—Å* –¥–æ –≤–∞—à–æ–≥–æ –º–µ–¥—ñ–∞—Ñ–∞–π–ª—É –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', —â–æ–± –∑–∞–ª–∏—à–∏—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º:",
        parse_mode="MarkdownV2"
    )
    await state.set_state(MessageState.message if not is_anonymous else AnonymousMessageState.message)

@router.message(StateFilter(MessageState.media))
async def get_media_or_message(message: types.Message, state: FSMContext):
    await handle_media_message(message, state, False)

@router.message(StateFilter(AnonymousMessageState.media))
async def get_anonymous_media_or_message(message: types.Message, state: FSMContext):
    await handle_media_message(message, state, True)

async def handle_message_text(message: types.Message, state: FSMContext, is_anonymous: bool):
    if message.text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        await state.update_data(final_message=message.text)
    
    if is_anonymous:
        await message.answer(
            "–Ø–∫ –∑ –≤–∞–º–∏ *–∑–≤'—è–∑–∞—Ç–∏—Å—è*? \\(–¢–µ–ª–µ–≥—Ä–∞–º/–î—ñ—Å–∫–æ—Ä–¥\\):",
            parse_mode="MarkdownV2"
        )
        await state.set_state(AnonymousMessageState.contact)
    else:
        await message.answer(
            "–û–±–µ—Ä—ñ—Ç—å *—Ç–µ–≥* –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:",
            reply_markup=tags_markup,
            parse_mode="MarkdownV2"
        )
        await state.set_state(MessageState.tag)

@router.message(StateFilter(MessageState.message))
async def get_message_text(message: types.Message, state: FSMContext):
    await handle_message_text(message, state, False)

@router.message(StateFilter(AnonymousMessageState.message))
async def get_anonymous_message_text(message: types.Message, state: FSMContext):
    await handle_message_text(message, state, True)

@router.message(StateFilter(AnonymousMessageState.contact))
async def get_anonymous_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    await message.answer(
        "–û–±–µ—Ä—ñ—Ç—å *—Ç–µ–≥* –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:",
        reply_markup=tags_markup,
        parse_mode="MarkdownV2"
    )
    await state.set_state(AnonymousMessageState.tag)

async def handle_tag_selection(callback_query: types.CallbackQuery, state: FSMContext, is_anonymous: bool):
    tag = callback_query.data.split("_")[1]
    await state.update_data(tag=tag)
    data = await state.get_data()

    final_text = await format_anonymous_message(data) if is_anonymous else await format_regular_message(data)
    markup = anonymous_confirmation_markup if is_anonymous else confirmation_markup

    await callback_query.message.answer(
        f"–û—Å—å –ø—ñ–¥—Å—É–º–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n\n{final_text}\n\n–ë–∞–∂–∞—î—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è?",
        reply_markup=markup,
        parse_mode="MarkdownV2"
    )
    await state.set_state(AnonymousMessageState.confirmation if is_anonymous else MessageState.confirmation)

@router.callback_query(StateFilter(MessageState.tag))
async def select_tag(callback_query: types.CallbackQuery, state: FSMContext):
    await handle_tag_selection(callback_query, state, False)

@router.callback_query(StateFilter(AnonymousMessageState.tag))
async def select_anonymous_tag(callback_query: types.CallbackQuery, state: FSMContext):
    await handle_tag_selection(callback_query, state, True)

async def send_final_message(chat_id: str, data: dict, is_anonymous: bool):
    message_text = await format_anonymous_message(data) if is_anonymous else await format_regular_message(data)
    
    if data.get("file_type") == "photo":
        await bot.send_photo(
            chat_id=chat_id,
            photo=data["file_id"],
            caption=message_text,
            parse_mode="MarkdownV2"
        )
    elif data.get("file_type") == "document":
        await bot.send_document(
            chat_id=chat_id,
            document=data["file_id"],
            caption=message_text,
            parse_mode="MarkdownV2"
        )
    else:
        await bot.send_message(
            chat_id=chat_id,
            text=message_text,
            parse_mode="MarkdownV2"
        )

async def handle_confirmation(callback_query: types.CallbackQuery, state: FSMContext, is_anonymous: bool):
    if callback_query.data.startswith("confirm"):
        data = await state.get_data()
        await send_final_message(GROUP_CHAT_ID, data, is_anonymous)
        await callback_query.message.answer(
            "–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!" if not is_anonymous else "–í–∞—à–µ –∞–Ω–æ–Ω—ñ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!"
        )
    else:
        await callback_query.message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.")
    
    await callback_query.message.answer("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∏–∂—á–µ:", reply_markup=main_menu)
    await state.clear()

@router.callback_query(StateFilter(MessageState.confirmation))
async def confirm_send(callback_query: types.CallbackQuery, state: FSMContext):
    await handle_confirmation(callback_query, state, False)

@router.callback_query(StateFilter(AnonymousMessageState.confirmation))
async def confirm_anonymous_send(callback_query: types.CallbackQuery, state: FSMContext):
    await handle_confirmation(callback_query, state, True)

async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())